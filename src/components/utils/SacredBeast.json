{
  "address": "0x7B3FcB0C177fd8654272eBB9C5F084f62D9D964e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_foodToken",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_seller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "evolForm",
          "type": "uint256"
        }
      ],
      "name": "Evole",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct SacredBeast.LockChoice",
          "name": "choice",
          "type": "tuple"
        }
      ],
      "name": "Feed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "NewLockChoice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Reclaim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "UpdateLockChoice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PER_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_multiplier",
          "type": "uint256"
        }
      ],
      "name": "addLockChoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "approveRewardDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "evolutionNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockIndex",
          "type": "uint256"
        }
      ],
      "name": "feed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockChoices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numberOfTokens",
          "type": "uint256"
        }
      ],
      "name": "mintBeast",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nft",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "evolForm",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "race",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "exp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            }
          ],
          "internalType": "struct SacredBeast.LockChoice",
          "name": "lockChoice",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nftRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "reclaimExpiredLocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "periodFinish",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerTokenStored",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardDistributors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seller",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_multiplier",
          "type": "uint256"
        }
      ],
      "name": "setLockChoice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalERC20Supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x029385d6c1440bd3847f1a48c429a7e02eb5b5cb398047e803388540cc6693d0",
  "receipt": {
    "to": null,
    "from": "0xC89cD6ed1A4ED6746BE2C31c7Eb4682C1Ab37381",
    "contractAddress": "0x7B3FcB0C177fd8654272eBB9C5F084f62D9D964e",
    "transactionIndex": 14,
    "gasUsed": "4029084",
    "logsBloom": "0x
    "blockHash": "0xc74a78573c74f4808d369426eb98761f3c42e9de88d00948e98e29618d8bb79b",
    "transactionHash": "0x029385d6c1440bd3847f1a48c429a7e02eb5b5cb398047e803388540cc6693d0",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 25991604,
        "transactionHash": "0x029385d6c1440bd3847f1a48c429a7e02eb5b5cb398047e803388540cc6693d0",
        "address": "0x7B3FcB0C177fd8654272eBB9C5F084f62D9D964e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c89cd6ed1a4ed6746be2c31c7eb4682c1ab37381"
        ],
        "data": "0x",
        "logIndex": 128,
        "blockHash": "0xc74a78573c74f4808d369426eb98761f3c42e9de88d00948e98e29618d8bb79b"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 25991604,
        "transactionHash": "0x029385d6c1440bd3847f1a48c429a7e02eb5b5cb398047e803388540cc6693d0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c89cd6ed1a4ed6746be2c31c7eb4682c1ab37381",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000011e489c67f636400000000000000000000000000000000000000000000000001101ba1328812feb00000000000000000000000000000000000000000000119f29198b751090b6e90000000000000000000000000000000000000000000000000fe37176c08af9ab00000000000000000000000000000000000000000000119f2a37d4117886ed29",
        "logIndex": 129,
        "blockHash": "0xc74a78573c74f4808d369426eb98761f3c42e9de88d00948e98e29618d8bb79b"
      }
    ],
    "blockNumber": 25991604,
    "cumulativeGasUsed": "7290983",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf91375fbf40d920c31016E1473c6D44F334Af13F",
    "0x870317bbE804fd33c0eD50af9329C8c2653bd56F"
  ],
  "solcInputHash": "4d68999d2805c1e12db391f6deccb043",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_foodToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_seller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"evolForm\",\"type\":\"uint256\"}],\"name\":\"Evole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct SacredBeast.LockChoice\",\"name\":\"choice\",\"type\":\"tuple\"}],\"name\":\"Feed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"NewLockChoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reclaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateLockChoice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PER_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"addLockChoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveRewardDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"evolutionNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockIndex\",\"type\":\"uint256\"}],\"name\":\"feed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockChoices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mintBeast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"evolForm\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"race\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"exp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct SacredBeast.LockChoice\",\"name\":\"lockChoice\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reclaimExpiredLocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStored\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardDistributors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setLockChoice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalERC20Supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SacredBeast.sol\":\"SacredBeast\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/SacredBeast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\ncontract SacredBeast is ERC721Enumerable, Ownable, ReentrancyGuard {\\r\\n    using Address for address payable;\\r\\n    IERC20 foodToken;\\r\\n\\r\\n    address payable public seller;\\r\\n\\r\\n    uint256 public MAX_SUPPLY = 10000;\\r\\n    uint256 public PRICE_PER_UNIT = 0.25 ether;\\r\\n\\r\\n    struct LockChoice {\\r\\n        uint256 duration;\\r\\n        uint256 multiplier;\\r\\n    }\\r\\n\\r\\n    struct LockedInfo {\\r\\n        uint256 amount;\\r\\n        uint256 unlockTime;\\r\\n        LockChoice lockChoice;\\r\\n    }\\r\\n\\r\\n    struct BeastInfo {\\r\\n        uint8 evolForm;\\r\\n        uint8 race;\\r\\n        uint256 exp;\\r\\n    }\\r\\n\\r\\n    struct Balances {\\r\\n        uint256 total;\\r\\n        uint256 unlocked;\\r\\n        uint256 locked;\\r\\n        uint256 earned;\\r\\n    }\\r\\n\\r\\n    struct Reward {\\r\\n        uint256 periodFinish;\\r\\n        uint256 rewardRate;\\r\\n        uint256 lastUpdateTime;\\r\\n        uint256 rewardPerTokenStored;\\r\\n    }\\r\\n\\r\\n    // tokenId -> BeastInfo\\r\\n    mapping(uint256 => BeastInfo) public nft;\\r\\n\\r\\n    uint256 public totalERC20Supply;\\r\\n    uint256 public lockedSupply;\\r\\n\\r\\n    mapping(address => bool) minters;\\r\\n\\r\\n    address[] public rewardTokens;\\r\\n    mapping(address => Reward) public rewardData;\\r\\n\\r\\n    // Duration that rewards are streamed over\\r\\n    uint256 public constant rewardsDuration = 86400 * 7;\\r\\n    // reward token -> distributor -> is approved to add rewards\\r\\n    mapping(address => mapping(address => bool)) public rewardDistributors;\\r\\n\\r\\n    // lock Choice\\r\\n    LockChoice[] public lockChoices;\\r\\n\\r\\n    // token Id -> reward token -> amount\\r\\n    mapping(uint256 => mapping(address => uint256))\\r\\n        public nftRewardPerTokenPaid;\\r\\n    mapping(uint256 => mapping(address => uint256)) public rewards;\\r\\n\\r\\n    // lock Data tokenId -> Info\\r\\n    mapping(uint256 => LockedInfo[]) public nftLocks;\\r\\n    mapping(uint256 => Balances) private balances;\\r\\n\\r\\n    bool internal _paused;\\r\\n\\r\\n    event Feed(\\r\\n        uint256 tokenId,\\r\\n        uint256 amount,\\r\\n        uint256 unlockTime,\\r\\n        LockChoice choice\\r\\n    );\\r\\n    event Reclaim(uint256 tokenId, uint256 amount);\\r\\n\\r\\n    event RewardPaid(address claimer, address rewardToken, uint256 reward);\\r\\n\\r\\n    event Evole(uint256 tokenId, uint256 evolForm);\\r\\n    event NewLockChoice(uint256 index, uint256 duration, uint256 multiplier);\\r\\n    event UpdateLockChoice(uint256 index, uint256 duration, uint256 multiplier);\\r\\n\\r\\n    /***********************************|\\r\\n  |          Initialization           |\\r\\n  |__________________________________*/\\r\\n\\r\\n    // foodToken : EVM Token, seller: seller address\\r\\n    constructor(IERC20 _foodToken, address payable _seller)\\r\\n        ERC721(\\\"SACRED BEAST\\\", \\\"SCB\\\")\\r\\n    {\\r\\n        foodToken = _foodToken;\\r\\n        seller = _seller;\\r\\n    }\\r\\n\\r\\n    /***********************************|\\r\\n  |             Modifiers             |\\r\\n  |__________________________________*/\\r\\n\\r\\n    modifier onlyExist(uint256 _tokenId) {\\r\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier updateReward(uint256 _tokenId) {\\r\\n        address token = address(foodToken);\\r\\n        uint256 balance;\\r\\n        uint256 supply = lockedSupply;\\r\\n        rewardData[token].rewardPerTokenStored = _rewardPerToken(token, supply);\\r\\n        rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\\r\\n        require(\\r\\n            _exists(_tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n        // Special case, use the locked balances and supply for stakingReward rewards\\r\\n        rewards[_tokenId][token] = _earned(\\r\\n            _tokenId,\\r\\n            token,\\r\\n            balances[_tokenId].locked,\\r\\n            supply\\r\\n        );\\r\\n        nftRewardPerTokenPaid[_tokenId][token] = rewardData[token]\\r\\n            .rewardPerTokenStored;\\r\\n        balance = balances[_tokenId].total;\\r\\n\\r\\n        supply = totalERC20Supply;\\r\\n        for (uint256 i = 1; i < rewardTokens.length; i++) {\\r\\n            token = rewardTokens[i];\\r\\n            rewardData[token].rewardPerTokenStored = _rewardPerToken(\\r\\n                token,\\r\\n                supply\\r\\n            );\\r\\n            rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\\r\\n\\r\\n            rewards[_tokenId][token] = _earned(\\r\\n                _tokenId,\\r\\n                token,\\r\\n                balance,\\r\\n                supply\\r\\n            );\\r\\n            nftRewardPerTokenPaid[_tokenId][token] = rewardData[token]\\r\\n                .rewardPerTokenStored;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /***********************************|\\r\\n  |     ADMIN CONFIGURATION              |\\r\\n  |__________________________________*/\\r\\n\\r\\n    function addLockChoice(uint256 _duration, uint256 _multiplier)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        lockChoices.push(\\r\\n            LockChoice({duration: _duration, multiplier: _multiplier})\\r\\n        );\\r\\n        emit NewLockChoice(lockChoices.length, _duration, _multiplier);\\r\\n    }\\r\\n\\r\\n    function setLockChoice(\\r\\n        uint256 _lockIndex,\\r\\n        uint256 _duration,\\r\\n        uint256 _multiplier\\r\\n    ) public onlyOwner {\\r\\n        LockChoice storage lockChoice = lockChoices[_lockIndex];\\r\\n        lockChoice.duration = _duration;\\r\\n        lockChoice.multiplier = _multiplier;\\r\\n        emit UpdateLockChoice(_lockIndex, _duration, _multiplier);\\r\\n    }\\r\\n\\r\\n    // Add a new reward token to be distributed to stakers\\r\\n    function addReward(address _rewardsToken, address _distributor)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(rewardData[_rewardsToken].lastUpdateTime == 0);\\r\\n        rewardTokens.push(_rewardsToken);\\r\\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\\r\\n        rewardData[_rewardsToken].periodFinish = block.timestamp;\\r\\n        rewardDistributors[_rewardsToken][_distributor] = true;\\r\\n    }\\r\\n\\r\\n    // Modify approval for an address to call notifyRewardAmount\\r\\n    function approveRewardDistributor(\\r\\n        address _rewardsToken,\\r\\n        address _distributor,\\r\\n        bool _approved\\r\\n    ) external onlyOwner {\\r\\n        require(rewardData[_rewardsToken].lastUpdateTime > 0);\\r\\n        rewardDistributors[_rewardsToken][_distributor] = _approved;\\r\\n    }\\r\\n\\r\\n    /***********************************|\\r\\n  |         NFT Functions               |\\r\\n  |__________________________________*/\\r\\n\\r\\n    /***********************************|\\r\\n  |              Public               |\\r\\n  |__________________________________*/\\r\\n\\r\\n    // Mint new NFT\\r\\n    function mintBeast(uint256 _numberOfTokens) public {\\r\\n        require(\\r\\n            totalSupply() + _numberOfTokens <= MAX_SUPPLY,\\r\\n            \\\"Purchase would exceed max supply\\\"\\r\\n        );\\r\\n        uint256 payAmount = PRICE_PER_UNIT * _numberOfTokens;\\r\\n        require(\\r\\n            foodToken.transferFrom(msg.sender, seller, payAmount),\\r\\n            \\\"Wrong pay amount\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _numberOfTokens; i++) {\\r\\n            uint256 mintIndex = totalSupply();\\r\\n            if (totalSupply() < MAX_SUPPLY) {\\r\\n                _safeMint(msg.sender, mintIndex);\\r\\n                nft[mintIndex] = BeastInfo({evolForm: 1, race: 0, exp: 0});\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Get Token URI\\r\\n    function tokenURI(uint256 _tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        require(\\r\\n            _exists(_tokenId),\\r\\n            \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n        );\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        string memory name = string(\\r\\n            abi.encodePacked(\\\"SACRED BEAST #\\\", toString(_tokenId))\\r\\n        );\\r\\n        string memory exp = toString(nft[_tokenId].exp);\\r\\n        string memory race = toString(nft[_tokenId].race);\\r\\n        string memory evolForm = toString(nft[_tokenId].evolForm);\\r\\n        string memory image = bytes(baseURI).length > 0\\r\\n            ? string(\\r\\n                abi.encodePacked(baseURI, \\\"/\\\", race, \\\"/\\\", evolForm, \\\".png\\\")\\r\\n            )\\r\\n            : \\\"\\\";\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\":\\\"',\\r\\n                                name,\\r\\n                                '\\\", \\\"description\\\":\\\"Sacred Beast is the mysthical beast of EVERMOON world. It can consume EVERMOON Token for exp and get stronger.\\\", \\\"exp\\\":\\\"',\\r\\n                                exp,\\r\\n                                '\\\", \\\"evolForm\\\":\\\"',\\r\\n                                evolForm,\\r\\n                                '\\\", \\\"race\\\":\\\"',\\r\\n                                race,\\r\\n                                '\\\", \\\"image\\\": \\\"',\\r\\n                                image,\\r\\n                                '\\\"}'\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // Feed the beast by consume Evermoon (ERC20) token, Beast's exp will be increased by tokenAmount * lockTime * multiplier\\r\\n    function feed(\\r\\n        uint256 _tokenId,\\r\\n        uint256 _amount,\\r\\n        uint256 _lockIndex\\r\\n    ) public onlyExist(_tokenId) {\\r\\n        require(foodToken.transferFrom(msg.sender, address(this), _amount));\\r\\n        totalERC20Supply = totalERC20Supply + _amount;\\r\\n        Balances storage bal = balances[_tokenId];\\r\\n        bal.total = bal.total + _amount;\\r\\n        bal.locked = bal.total + _amount;\\r\\n        lockedSupply += _amount;\\r\\n        LockChoice storage lockChoice = lockChoices[_lockIndex];\\r\\n        uint256 gainExp = _calConsumeEXP(_amount, lockChoice);\\r\\n        nft[_tokenId].exp += gainExp;\\r\\n\\r\\n        uint256 unlockTime = block.timestamp + lockChoice.duration;\\r\\n        uint256 idx = nftLocks[_tokenId].length;\\r\\n        if (idx == 0 || nftLocks[_tokenId][idx - 1].unlockTime < unlockTime) {\\r\\n            nftLocks[_tokenId].push(\\r\\n                LockedInfo({\\r\\n                    amount: _amount,\\r\\n                    unlockTime: unlockTime,\\r\\n                    lockChoice: lockChoice\\r\\n                })\\r\\n            );\\r\\n        } else {\\r\\n            nftLocks[_tokenId][idx - 1].amount =\\r\\n                nftLocks[_tokenId][idx - 1].amount +\\r\\n                _amount;\\r\\n        }\\r\\n\\r\\n        emit Feed(_tokenId, _amount, unlockTime, lockChoice);\\r\\n    }\\r\\n\\r\\n    function _rewardPerToken(address _rewardsToken, uint256 _supply)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (_supply == 0) {\\r\\n            return rewardData[_rewardsToken].rewardPerTokenStored;\\r\\n        }\\r\\n        return\\r\\n            rewardData[_rewardsToken].rewardPerTokenStored +\\r\\n            ((((lastTimeRewardApplicable(_rewardsToken) -\\r\\n                rewardData[_rewardsToken].lastUpdateTime) *\\r\\n                rewardData[_rewardsToken].rewardRate) * (1e18)) / _supply);\\r\\n    }\\r\\n\\r\\n    function _earned(\\r\\n        uint256 _tokenId,\\r\\n        address _rewardsToken,\\r\\n        uint256 _balance,\\r\\n        uint256 supply\\r\\n    ) internal view returns (uint256) {\\r\\n        return\\r\\n            ((_balance *\\r\\n                (_rewardPerToken(_rewardsToken, supply) -\\r\\n                    nftRewardPerTokenPaid[_tokenId][_rewardsToken])) / 1e18) +\\r\\n            (rewards[_tokenId][_rewardsToken]);\\r\\n    }\\r\\n\\r\\n    function lastTimeRewardApplicable(address _rewardsToken)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return\\r\\n            Math.min(block.timestamp, rewardData[_rewardsToken].periodFinish);\\r\\n    }\\r\\n\\r\\n    function rewardPerToken(address _rewardsToken)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 supply = _rewardsToken == address(foodToken)\\r\\n            ? lockedSupply\\r\\n            : totalERC20Supply;\\r\\n        return _rewardPerToken(_rewardsToken, supply);\\r\\n    }\\r\\n\\r\\n    function getRewardForDuration(address _rewardsToken)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return rewardData[_rewardsToken].rewardRate * rewardsDuration;\\r\\n    }\\r\\n\\r\\n    /***********************************|\\r\\n  |     Only Token ID Owner             |\\r\\n  |__________________________________*/\\r\\n\\r\\n    // Withdraw all currently locked tokens where the unlock time has passed\\r\\n    function reclaimExpiredLocks(uint256 _tokenId) public onlyExist(_tokenId) {\\r\\n        require(ownerOf(_tokenId) == msg.sender, \\\"Not Owner of NFT\\\");\\r\\n        LockedInfo[] storage locks = nftLocks[_tokenId];\\r\\n        Balances storage bal = balances[_tokenId];\\r\\n        uint256 amount;\\r\\n        uint256 length = locks.length;\\r\\n        if (locks[length - 1].unlockTime <= block.timestamp) {\\r\\n            amount = bal.locked;\\r\\n            delete nftLocks[_tokenId];\\r\\n        } else {\\r\\n            for (uint256 i = 0; i < length; i++) {\\r\\n                if (locks[i].unlockTime > block.timestamp) break;\\r\\n                amount = amount + locks[i].amount;\\r\\n                delete locks[i];\\r\\n            }\\r\\n        }\\r\\n        bal.locked = bal.locked - amount;\\r\\n        bal.total = bal.total - amount;\\r\\n        totalERC20Supply = totalERC20Supply - amount;\\r\\n        lockedSupply = lockedSupply - amount;\\r\\n        foodToken.transfer(msg.sender, amount);\\r\\n        // Emit event\\r\\n        emit Reclaim(_tokenId, amount);\\r\\n    }\\r\\n\\r\\n    // Claim all pending staking rewards\\r\\n    function getReward(uint256 _tokenId)\\r\\n        public\\r\\n        nonReentrant\\r\\n        updateReward(_tokenId)\\r\\n    {\\r\\n        for (uint256 i; i < rewardTokens.length; i++) {\\r\\n            address _rewardsToken = rewardTokens[i];\\r\\n            uint256 reward = rewards[_tokenId][_rewardsToken];\\r\\n            if (reward > 0) {\\r\\n                rewards[_tokenId][_rewardsToken] = 0;\\r\\n                IERC20(_rewardsToken).transfer(msg.sender, reward);\\r\\n                emit RewardPaid(msg.sender, _rewardsToken, reward);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Evole form of NFT -> If EXP gathered > (BaseExp: 10 ** 6) * (5 ** EvolForm) * (Decimal 10 ** 18)\\r\\n    function evolutionNFT(uint256 _tokenId) public {\\r\\n        require(ownerOf(_tokenId) == msg.sender);\\r\\n        // if true evolForm += 1\\r\\n        require(\\r\\n            nft[_tokenId].exp >\\r\\n                (10**6) * (5**(nft[_tokenId].evolForm)) * (10**18)\\r\\n        );\\r\\n        require(nft[_tokenId].evolForm < 6);\\r\\n        if (nft[_tokenId].evolForm == 1) {\\r\\n            uint8 randomNumber = uint8(\\r\\n                generateRandom(5, _tokenId, this.evolutionNFT.selector)\\r\\n            );\\r\\n            nft[_tokenId].race = randomNumber;\\r\\n        }\\r\\n        nft[_tokenId].evolForm += 1;\\r\\n        emit Evole(_tokenId, nft[_tokenId].evolForm);\\r\\n    }\\r\\n\\r\\n    /***********************************|\\r\\n  |          Only Admin/DAO           |\\r\\n  |__________________________________*/\\r\\n\\r\\n    function withdrawETH(address payable _to) public onlyOwner {\\r\\n        _to.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    /***********************************|\\r\\n  |         Private Functions         |\\r\\n  |__________________________________*/\\r\\n\\r\\n    function _baseURI() internal view virtual override returns (string memory) {\\r\\n        return \\\"\\\"; //TODO Add IPFS folder base URL\\r\\n    }\\r\\n\\r\\n    function _calConsumeEXP(uint256 _amount, LockChoice memory _choice)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _choice.duration * _choice.multiplier * _amount;\\r\\n    }\\r\\n\\r\\n    /// @notice Generate random number between 1 and max\\r\\n    /// @param max Maximum value of the random number\\r\\n    /// @param tokenId TokenId\\r\\n    /// @param selector Caller selector used as seed\\r\\n    function generateRandom(\\r\\n        uint256 max,\\r\\n        uint256 tokenId,\\r\\n        bytes4 selector\\r\\n    ) internal view returns (uint256) {\\r\\n        return\\r\\n            (uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        block.difficulty,\\r\\n                        block.number,\\r\\n                        tx.origin,\\r\\n                        tx.gasprice,\\r\\n                        selector,\\r\\n                        tokenId\\r\\n                    )\\r\\n                )\\r\\n            ) % (max + 1)) + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\r\\n\\r\\n    function _notifyReward(address _rewardsToken, uint256 reward) internal {\\r\\n        if (block.timestamp >= rewardData[_rewardsToken].periodFinish) {\\r\\n            rewardData[_rewardsToken].rewardRate = reward / rewardsDuration;\\r\\n        } else {\\r\\n            uint256 remaining = rewardData[_rewardsToken].periodFinish -\\r\\n                block.timestamp;\\r\\n            uint256 leftover = remaining * rewardData[_rewardsToken].rewardRate;\\r\\n            rewardData[_rewardsToken].rewardRate =\\r\\n                (reward + leftover) /\\r\\n                (rewardsDuration);\\r\\n        }\\r\\n\\r\\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\\r\\n        rewardData[_rewardsToken].periodFinish =\\r\\n            block.timestamp +\\r\\n            rewardsDuration;\\r\\n    }\\r\\n\\r\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\r\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(\\r\\n            tokenAddress != address(foodToken),\\r\\n            \\\"Cannot withdraw staking token\\\"\\r\\n        );\\r\\n        require(\\r\\n            rewardData[tokenAddress].lastUpdateTime == 0,\\r\\n            \\\"Cannot withdraw reward token\\\"\\r\\n        );\\r\\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\\r\\n        // emit Recovered(tokenAddress, tokenAmount);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x88f329773f1ef56235e8428b07022bb6f0188284b2d685c00feaebc1078f2cb4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052612710600e556703782dace9d90000600f553480156200002357600080fd5b506040516200476a3803806200476a833981016040819052620000469162000214565b604080518082018252600c81526b14d050d491510810915054d560a21b60208083019182528351808501909452600384526229a1a160e91b908401528151919291620000959160009162000155565b508051620000ab90600190602084019062000155565b505050620000c8620000c2620000ff60201b60201c565b62000103565b6001600b55600c80546001600160a01b039384166001600160a01b031991821617909155600d805492909316911617905562000290565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001639062000253565b90600052602060002090601f016020900481019282620001875760008555620001d2565b82601f10620001a257805160ff1916838001178555620001d2565b82800160010185558215620001d2579182015b82811115620001d2578251825591602001919060010190620001b5565b50620001e0929150620001e4565b5090565b5b80821115620001e05760008155600101620001e5565b6001600160a01b03811681146200021157600080fd5b50565b600080604083850312156200022857600080fd5b82516200023581620001fb565b60208401519092506200024881620001fb565b809150509250929050565b600181811c908216806200026857607f821691505b602082108114156200028a57634e487b7160e01b600052602260045260246000fd5b50919050565b6144ca80620002a06000396000f3fe608060405234801561001057600080fd5b50600436106103155760003560e01c80636815b6d6116101a7578063a22cb465116100ee578063ca5c7b9111610097578063f2db11af11610071578063f2db11af1461075e578063f2fde38b14610789578063f6d30e6b1461079c57600080fd5b8063ca5c7b9114610706578063e985e9c51461070f578063f12297771461074b57600080fd5b8063b88d4fde116100c8578063b88d4fde146106cd578063bcd11014146106e0578063c87b56dd146106f357600080fd5b8063a22cb46514610667578063a444914b1461067a578063af9ea7c3146106a257600080fd5b80637bb7bed111610150578063919cbc4e1161012a578063919cbc4e1461060257806395d89b411461060b5780639d0214cb1461061357600080fd5b80637bb7bed1146105cb5780638980f11f146105de5780638da5cb5b146105f157600080fd5b8063715018a611610181578063715018a61461059d57806373de83c4146105a55780637a0dedf6146105b857600080fd5b80636815b6d61461056e578063690d83201461057757806370a082311461058a57600080fd5b806332cb6b0c1161026b57806348e5d9f8116102145780636352211e116101ee5780636352211e14610535578063638634ee146105485780636724c9101461055b57600080fd5b806348e5d9f8146104ba5780634f6ccce71461050f578063545edc341461052257600080fd5b806340b47e1a1161024557806340b47e1a1461048157806342842e0e146104945780634404972a146104a757600080fd5b806332cb6b0c14610440578063386a95251461044957806339fc97131461045357600080fd5b806318160ddd116102cd5780632514057e116102a75780632514057e146103e25780632a314a921461041a5780632f745c591461042d57600080fd5b806318160ddd146103aa5780631c4b774b146103bc57806323b872dd146103cf57600080fd5b8063081812fc116102fe578063081812fc1461035757806308551a5314610382578063095ea7b31461039557600080fd5b806301ffc9a71461031a57806306fdde0314610342575b600080fd5b61032d6103283660046139b5565b6107af565b60405190151581526020015b60405180910390f35b61034a61080b565b6040516103399190613a48565b61036a610365366004613a5b565b61089d565b6040516001600160a01b039091168152602001610339565b600d5461036a906001600160a01b031681565b6103a86103a3366004613a89565b610948565b005b6008545b604051908152602001610339565b6103a86103ca366004613a5b565b610a7a565b6103a86103dd366004613ab5565b610ea3565b6103f56103f0366004613af6565b610f2a565b6040805193845260208085019390935281519084015201516060820152608001610339565b6103a8610428366004613a5b565b610f84565b6103ae61043b366004613a89565b61112f565b6103ae600e5481565b6103ae62093a8081565b61032d610461366004613b18565b601660209081526000928352604080842090915290825290205460ff1681565b6103a861048f366004613b18565b6111d7565b6103a86104a2366004613ab5565b611314565b6103a86104b5366004613af6565b61132f565b6104ef6104c8366004613b51565b60156020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610339565b6103ae61051d366004613a5b565b611446565b6103a8610530366004613b6e565b6114ea565b61036a610543366004613a5b565b6115bb565b6103ae610556366004613b51565b611646565b6103a8610569366004613ba8565b61166a565b6103ae60115481565b6103a8610585366004613b51565b611741565b6103ae610598366004613b51565b6117d4565b6103a861186e565b6103a86105b3366004613a5b565b6118d4565b6103a86105c6366004613b6e565b611af2565b61036a6105d9366004613a5b565b611e9e565b6103a86105ec366004613a89565b611ec8565b600a546001600160a01b031661036a565b6103ae600f5481565b61034a6120a2565b610647610621366004613a5b565b6010602052600090815260409020805460019091015460ff808316926101009004169083565b6040805160ff948516815293909216602084015290820152606001610339565b6103a8610675366004613bf3565b6120b1565b61068d610688366004613a5b565b6120bc565b60408051928352602083019190915201610339565b6103ae6106b0366004613c21565b601860209081526000928352604080842090915290825290205481565b6103a86106db366004613c75565b6120ea565b6103ae6106ee366004613b51565b612178565b61034a610701366004613a5b565b6121a2565b6103ae60125481565b61032d61071d366004613b18565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103ae610759366004613b51565b612396565b6103ae61076c366004613c21565b601960209081526000928352604080842090915290825290205481565b6103a8610797366004613b51565b6123cf565b6103a86107aa366004613a5b565b6124b1565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806108055750610805826127c9565b92915050565b60606000805461081a90613d73565b80601f016020809104026020016040519081016040528092919081815260200182805461084690613d73565b80156108935780601f1061086857610100808354040283529160200191610893565b820191906000526020600020905b81548152906001019060200180831161087657829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661092c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610953826115bb565b9050806001600160a01b0316836001600160a01b031614156109dd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610923565b336001600160a01b03821614806109f957506109f9813361071d565b610a6b5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610923565b610a7583836128ac565b505050565b6002600b541415610acd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610923565b6002600b55600c5460125482916001600160a01b031690600090610af18382612932565b6001600160a01b038416600090815260156020526040902060030155610b1683611646565b6001600160a01b038416600090815260156020526040902060020155610b53846000908152600260205260409020546001600160a01b0316151590565b610bc55760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610923565b6000848152601b6020526040902060020154610be59085908590846129e0565b60008581526019602090815260408083206001600160a01b0388168085529083528184209490945560158252808320600301548884526018835281842094845293825280832093909355868252601b90522054601154909250905060015b601454811015610d275760148181548110610c6057610c60613dc7565b6000918252602090912001546001600160a01b03169350610c818483612932565b6001600160a01b038516600090815260156020526040902060030155610ca684611646565b6001600160a01b038516600090815260156020526040902060020155610cce858585856129e0565b60008681526019602090815260408083206001600160a01b038916808552908352818420949094556015825280832060030154898452601883528184209484529390915290205580610d1f81613e25565b915050610c43565b5060005b601454811015610e9657600060148281548110610d4a57610d4a613dc7565b60009182526020808320909101548983526019825260408084206001600160a01b03909216808552919092529120549091508015610e815760008881526019602090815260408083206001600160a01b03861680855292528083209290925590517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905263a9059cbb90604401602060405180830381600087803b158015610dfe57600080fd5b505af1158015610e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e369190613e5e565b50604080513381526001600160a01b03841660208201529081018290527f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e9060600160405180910390a15b50508080610e8e90613e25565b915050610d2b565b50506001600b5550505050565b610ead3382612a5e565b610f1f5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610923565b610a75838383612b62565b601a6020528160005260406000208181548110610f4657600080fd5b600091825260209182902060049091020180546001820154604080518082019091526002840154815260039093015493830193909352935090915083565b33610f8e826115bb565b6001600160a01b031614610fa157600080fd5b600081815260106020526040902054610fbe9060ff166005613f9b565b610fcb90620f4240613faa565b610fdd90670de0b6b3a7640000613faa565b60008281526010602052604090206001015411610ff957600080fd5b600081815260106020526040902054600660ff9091161061101957600080fd5b60008181526010602052604090205460ff16600114156110a65760006110616005837f2a314a9200000000000000000000000000000000000000000000000000000000612d52565b6000838152601060205260409020805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055505b60008181526010602052604081208054600192906110c890849060ff16613fe7565b82546101009290920a60ff8181021990931691831602179091556000838152601060209081526040918290205482518681529316908301527f7c5df07daff086a5c44a8baad5d3e79781acaa5ec7654211fa8e30cc7322211392500160405180910390a150565b600061113a836117d4565b82106111ae5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610923565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b031633146112315760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b6001600160a01b0382166000908152601560205260409020600201541561125757600080fd5b6014805460018082019092557fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03948516908117909155600090815260156020908152604080832042600282018190559055601682528083209490951682529290925291902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b610a75838383604051806020016040528060008152506120ea565b600a546001600160a01b031633146113895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b604080518082018252838152602080820184815260178054600181018255600082905293517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1560029095029485015590517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1690930192909255905482519081529081018490529081018290527fa41017d8802e7e891c590c66e4f54b95797591f870898950d292f779fd6f95f89060600160405180910390a15050565b600061145160085490565b82106114c55760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610923565b600882815481106114d8576114d8613dc7565b90600052602060002001549050919050565b600a546001600160a01b031633146115445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b60006017848154811061155957611559613dc7565b60009182526020918290206002909102018481556001810184905560408051878152928301869052820184905291507f995322dc15f5c8a0198e5dbadbb1142f145efaa71fba43947f92505288ac5e129060600160405180910390a150505050565b6000818152600260205260408120546001600160a01b0316806108055760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610923565b6001600160a01b038116600090815260156020526040812054610805904290612e03565b600a546001600160a01b031633146116c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b6001600160a01b0383166000908152601560205260409020600201546116e957600080fd5b6001600160a01b0392831660009081526016602090815260408083209490951682529290925291902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600a546001600160a01b0316331461179b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b6040516001600160a01b038216904780156108fc02916000818181858888f193505050501580156117d0573d6000803e3d6000fd5b5050565b60006001600160a01b0382166118525760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610923565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146118c85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b6118d26000612e19565b565b600e54816118e160085490565b6118eb919061400c565b11156119395760405162461bcd60e51b815260206004820181905260248201527f507572636861736520776f756c6420657863656564206d617820737570706c796044820152606401610923565b600081600f546119499190613faa565b600c54600d546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0391821660248201526044810184905292935016906323b872dd90606401602060405180830381600087803b1580156119ba57600080fd5b505af11580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f29190613e5e565b611a3e5760405162461bcd60e51b815260206004820152601060248201527f57726f6e672070617920616d6f756e74000000000000000000000000000000006044820152606401610923565b60005b82811015610a75576000611a5460085490565b9050600e54611a6260085490565b1015611adf57611a723382612e83565b6040805160608101825260018082526000602080840182815284860183815287845260109092529490912092518354945160ff908116610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090961691161793909317825591519101555b5080611aea81613e25565b915050611a41565b60008381526002602052604090205483906001600160a01b0316611b585760405162461bcd60e51b815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610923565b600c546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015611bc357600080fd5b505af1158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb9190613e5e565b611c0457600080fd5b82601154611c12919061400c565b6011556000848152601b602052604090208054611c3090859061400c565b808255611c3e90859061400c565b81600201819055508360126000828254611c58919061400c565b92505081905550600060178481548110611c7457611c74613dc7565b906000526020600020906002020190506000611caf868360405180604001604052908160008201548152602001600182015481525050612e9d565b905080601060008981526020019081526020016000206001016000828254611cd7919061400c565b90915550508154600090611ceb904261400c565b6000898152601a6020526040902054909150801580611d4457506000898152601a602052604090208290611d20600184614024565b81548110611d3057611d30613dc7565b906000526020600020906004020160010154105b15611dbf576000898152601a6020908152604080832081516060810183528c8152808401878152835180850185528a5481526001808c01548288015294830190815283548086018555938752958590209151600490930290910191825551918101919091559151805160028401550151600390910155611e41565b6000898152601a602052604090208890611dda600184614024565b81548110611dea57611dea613dc7565b906000526020600020906004020160000154611e06919061400c565b60008a8152601a60205260409020611e1f600184614024565b81548110611e2f57611e2f613dc7565b60009182526020909120600490910201555b604080518a8152602081018a905290810183905284546060820152600185015460808201527f392e2679c5174813e985de6b1bb03672f942be834139636e218f0b4f4f01f99b9060a00160405180910390a1505050505050505050565b60148181548110611eae57600080fd5b6000918252602090912001546001600160a01b0316905081565b600a546001600160a01b03163314611f225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b600c546001600160a01b0383811691161415611f805760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f74207769746864726177207374616b696e6720746f6b656e0000006044820152606401610923565b6001600160a01b03821660009081526015602052604090206002015415611fe95760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742077697468647261772072657761726420746f6b656e000000006044820152606401610923565b816001600160a01b031663a9059cbb61200a600a546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561206a57600080fd5b505af115801561207e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190613e5e565b60606001805461081a90613d73565b6117d0338383612ebe565b601781815481106120cc57600080fd5b60009182526020909120600290910201805460019091015490915082565b6120f43383612a5e565b6121665760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610923565b61217284848484612fab565b50505050565b6001600160a01b0381166000908152601560205260408120600101546108059062093a8090613faa565b6000818152600260205260409020546060906001600160a01b031661222f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610923565b600061224660408051602081019091526000815290565b9050600061225384613034565b6040516020016122639190614057565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526000868152601060205290812060010154919250906122af90613034565b600086815260106020526040812054919250906122d390610100900460ff16613034565b600087815260106020526040812054919250906122f29060ff16613034565b90506000808651116123135760405180602001604052806000815250612338565b8583836040516020016123289392919061409c565b6040516020818303038152906040525b905061236a858584868560405160200161235695949392919061413c565b604051602081830303815290604052613166565b60405160200161237a9190614330565b6040516020818303038152906040529650505050505050919050565b600c5460009081906001600160a01b038481169116146123b8576011546123bc565b6012545b90506123c88382612932565b9392505050565b600a546001600160a01b031633146124295760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b6001600160a01b0381166124a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610923565b6124ae81612e19565b50565b60008181526002602052604090205481906001600160a01b03166125175760405162461bcd60e51b815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610923565b33612521836115bb565b6001600160a01b0316146125775760405162461bcd60e51b815260206004820152601060248201527f4e6f74204f776e6572206f66204e4654000000000000000000000000000000006044820152606401610923565b6000828152601a60209081526040808320601b909252822081549192909142846125a2600184614024565b815481106125b2576125b2613dc7565b906000526020600020906004020160010154116125ee5760028301546000878152601a602052604081209193506125e9919061393e565b6126a4565b60005b818110156126a2574285828154811061260c5761260c613dc7565b9060005260206000209060040201600101541115612629576126a2565b84818154811061263b5761263b613dc7565b90600052602060002090600402016000015483612658919061400c565b925084818154811061266c5761266c613dc7565b6000918252602082206004909102018181556001810182905560028101829055600301558061269a81613e25565b9150506125f1565b505b8183600201546126b49190614024565b600284015582546126c6908390614024565b83556011546126d6908390614024565b6011556012546126e7908390614024565b601255600c546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561274f57600080fd5b505af1158015612763573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127879190613e5e565b5060408051878152602081018490527fc266233ef087afa73a2a6f7c129f3c7184bbdae1c5b5763a4b9b378a6ae11fe7910160405180910390a1505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061285c57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061080557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610805565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915581906128f9826115bb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008161295b57506001600160a01b038216600090815260156020526040902060030154610805565b6001600160a01b0383166000908152601560205260409020600181015460029091015483919061298a86611646565b6129949190614024565b61299e9190613faa565b6129b090670de0b6b3a7640000613faa565b6129ba91906143a4565b6001600160a01b0384166000908152601560205260409020600301546123c8919061400c565b60008481526019602090815260408083206001600160a01b03871680855290835281842054888552601884528285209185529252822054670de0b6b3a764000090612a2b8786612932565b612a359190614024565b612a3f9086613faa565b612a4991906143a4565b612a53919061400c565b90505b949350505050565b6000818152600260205260408120546001600160a01b0316612ae85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610923565b6000612af3836115bb565b9050806001600160a01b0316846001600160a01b03161480612b2e5750836001600160a01b0316612b238461089d565b6001600160a01b0316145b80612a5657506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16612a56565b826001600160a01b0316612b75826115bb565b6001600160a01b031614612bf15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610923565b6001600160a01b038216612c6c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610923565b612c7783838361333f565b612c826000826128ac565b6001600160a01b0383166000908152600360205260408120805460019290612cab908490614024565b90915550506001600160a01b0382166000908152600360205260408120805460019290612cd990849061400c565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000612d5f84600161400c565b60408051446020820152439181019190915232606090811b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016908201523a60748201527fffffffff00000000000000000000000000000000000000000000000000000000841660948201526098810185905260b8016040516020818303038152906040528051906020012060001c612df891906143b8565b612a5690600161400c565b6000818310612e1257816123c8565b5090919050565b600a80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6117d08282604051806020016040528060008152506133f7565b60008282602001518360000151612eb49190613faa565b6123c89190613faa565b816001600160a01b0316836001600160a01b03161415612f205760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610923565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612fb6848484612b62565b612fc284848484613480565b6121725760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610923565b60608161307457505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561309e578061308881613e25565b91506130979050600a836143a4565b9150613078565b60008167ffffffffffffffff8111156130b9576130b9613c46565b6040519080825280601f01601f1916602001820160405280156130e3576020820181803683370190505b5090505b8415612a56576130f8600183614024565b9150613105600a866143b8565b61311090603061400c565b60f81b81838151811061312557613125613dc7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061315f600a866143a4565b94506130e7565b606081516000141561318657505060408051602081019091526000815290565b600060405180606001604052806040815260200161445560409139905060006003845160026131b5919061400c565b6131bf91906143a4565b6131ca906004613faa565b905060006131d982602061400c565b67ffffffffffffffff8111156131f1576131f1613c46565b6040519080825280601f01601f19166020018201604052801561321b576020820181803683370190505b509050818152600183018586518101602084015b81831015613287576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161322f565b6003895106600181146132a157600281146132eb57613331565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe830152613331565b7f3d000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301525b509398975050505050505050565b6001600160a01b03831661339a5761339581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6133bd565b816001600160a01b0316836001600160a01b0316146133bd576133bd8382613648565b6001600160a01b0382166133d457610a75816136e5565b826001600160a01b0316826001600160a01b031614610a7557610a758282613794565b61340183836137d8565b61340e6000848484613480565b610a755760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610923565b60006001600160a01b0384163b15613640576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906134dd9033908990889088906004016143cc565b602060405180830381600087803b1580156134f757600080fd5b505af1925050508015613545575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261354291810190614408565b60015b6135f5573d808015613573576040519150601f19603f3d011682016040523d82523d6000602084013e613578565b606091505b5080516135ed5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610923565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612a56565b506001612a56565b60006001613655846117d4565b61365f9190614024565b6000838152600760205260409020549091508082146136b2576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906136f790600190614024565b6000838152600960205260408120546008805493945090928490811061371f5761371f613dc7565b90600052602060002001549050806008838154811061374057613740613dc7565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061377857613778614425565b6001900381819060005260206000200160009055905550505050565b600061379f836117d4565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661382e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610923565b6000818152600260205260409020546001600160a01b0316156138935760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610923565b61389f6000838361333f565b6001600160a01b03821660009081526003602052604081208054600192906138c890849061400c565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b50805460008255600402906000526020600020908101906124ae91905b808211156139835760008082556001820181905560028201819055600382015560040161395b565b5090565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146124ae57600080fd5b6000602082840312156139c757600080fd5b81356123c881613987565b60005b838110156139ed5781810151838201526020016139d5565b838111156121725750506000910152565b60008151808452613a168160208601602086016139d2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006123c860208301846139fe565b600060208284031215613a6d57600080fd5b5035919050565b6001600160a01b03811681146124ae57600080fd5b60008060408385031215613a9c57600080fd5b8235613aa781613a74565b946020939093013593505050565b600080600060608486031215613aca57600080fd5b8335613ad581613a74565b92506020840135613ae581613a74565b929592945050506040919091013590565b60008060408385031215613b0957600080fd5b50508035926020909101359150565b60008060408385031215613b2b57600080fd5b8235613b3681613a74565b91506020830135613b4681613a74565b809150509250929050565b600060208284031215613b6357600080fd5b81356123c881613a74565b600080600060608486031215613b8357600080fd5b505081359360208301359350604090920135919050565b80151581146124ae57600080fd5b600080600060608486031215613bbd57600080fd5b8335613bc881613a74565b92506020840135613bd881613a74565b91506040840135613be881613b9a565b809150509250925092565b60008060408385031215613c0657600080fd5b8235613c1181613a74565b91506020830135613b4681613b9a565b60008060408385031215613c3457600080fd5b823591506020830135613b4681613a74565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060008060808587031215613c8b57600080fd5b8435613c9681613a74565b93506020850135613ca681613a74565b925060408501359150606085013567ffffffffffffffff80821115613cca57600080fd5b818701915087601f830112613cde57600080fd5b813581811115613cf057613cf0613c46565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613d3657613d36613c46565b816040528281528a6020848701011115613d4f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600181811c90821680613d8757607f821691505b60208210811415613dc1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e5757613e57613df6565b5060010190565b600060208284031215613e7057600080fd5b81516123c881613b9a565b600181815b80851115613ed457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613eba57613eba613df6565b80851615613ec757918102915b93841c9390800290613e80565b509250929050565b600082613eeb57506001610805565b81613ef857506000610805565b8160018114613f0e5760028114613f1857613f34565b6001915050610805565b60ff841115613f2957613f29613df6565b50506001821b610805565b5060208310610133831016604e8410600b8410161715613f57575081810a610805565b613f618383613e7b565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613f9357613f93613df6565b029392505050565b60006123c860ff841683613edc565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613fe257613fe2613df6565b500290565b600060ff821660ff84168060ff0382111561400457614004613df6565b019392505050565b6000821982111561401f5761401f613df6565b500190565b60008282101561403657614036613df6565b500390565b6000815161404d8185602086016139d2565b9290920192915050565b7f534143524544204245415354202300000000000000000000000000000000000081526000825161408f81600e8501602087016139d2565b91909101600e0192915050565b600084516140ae8184602089016139d2565b80830190507f2f0000000000000000000000000000000000000000000000000000000000000080825285516140ea816001850160208a016139d2565b600192019182015283516141058160028401602088016139d2565b7f2e706e67000000000000000000000000000000000000000000000000000000006002929091019182015260060195945050505050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000815260008651614174816009850160208b016139d2565b7f222c20226465736372697074696f6e223a2253616372656420426561737420696009918401918201527f7320746865206d797374686963616c206265617374206f6620455645524d4f4f60298201527f4e20776f726c642e2049742063616e20636f6e73756d6520455645524d4f4f4e60498201527f20546f6b656e20666f722065787020616e6420676574207374726f6e6765722e60698201527f222c2022657870223a220000000000000000000000000000000000000000000060898201528651614249816093840160208b016139d2565b7f222c202265766f6c466f726d223a2200000000000000000000000000000000006093929091019182015285516142878160a2840160208a016139d2565b6143236142fa6142f46142cb6142c560a2868801017f222c202272616365223a220000000000000000000000000000000000000000008152600b0190565b8a61403b565b7f222c2022696d616765223a2022000000000000000000000000000000000000008152600d0190565b8761403b565b7f227d000000000000000000000000000000000000000000000000000000000000815260020190565b9998505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161436881601d8501602087016139d2565b91909101601d0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826143b3576143b3614375565b500490565b6000826143c7576143c7614375565b500690565b60006001600160a01b038087168352808616602084015250836040830152608060608301526143fe60808301846139fe565b9695505050505050565b60006020828403121561441a57600080fd5b81516123c881613987565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220f0a3112b4c282b3fc157c2e6b84f73d240527f019460b8c50e79369e5f55113864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103155760003560e01c80636815b6d6116101a7578063a22cb465116100ee578063ca5c7b9111610097578063f2db11af11610071578063f2db11af1461075e578063f2fde38b14610789578063f6d30e6b1461079c57600080fd5b8063ca5c7b9114610706578063e985e9c51461070f578063f12297771461074b57600080fd5b8063b88d4fde116100c8578063b88d4fde146106cd578063bcd11014146106e0578063c87b56dd146106f357600080fd5b8063a22cb46514610667578063a444914b1461067a578063af9ea7c3146106a257600080fd5b80637bb7bed111610150578063919cbc4e1161012a578063919cbc4e1461060257806395d89b411461060b5780639d0214cb1461061357600080fd5b80637bb7bed1146105cb5780638980f11f146105de5780638da5cb5b146105f157600080fd5b8063715018a611610181578063715018a61461059d57806373de83c4146105a55780637a0dedf6146105b857600080fd5b80636815b6d61461056e578063690d83201461057757806370a082311461058a57600080fd5b806332cb6b0c1161026b57806348e5d9f8116102145780636352211e116101ee5780636352211e14610535578063638634ee146105485780636724c9101461055b57600080fd5b806348e5d9f8146104ba5780634f6ccce71461050f578063545edc341461052257600080fd5b806340b47e1a1161024557806340b47e1a1461048157806342842e0e146104945780634404972a146104a757600080fd5b806332cb6b0c14610440578063386a95251461044957806339fc97131461045357600080fd5b806318160ddd116102cd5780632514057e116102a75780632514057e146103e25780632a314a921461041a5780632f745c591461042d57600080fd5b806318160ddd146103aa5780631c4b774b146103bc57806323b872dd146103cf57600080fd5b8063081812fc116102fe578063081812fc1461035757806308551a5314610382578063095ea7b31461039557600080fd5b806301ffc9a71461031a57806306fdde0314610342575b600080fd5b61032d6103283660046139b5565b6107af565b60405190151581526020015b60405180910390f35b61034a61080b565b6040516103399190613a48565b61036a610365366004613a5b565b61089d565b6040516001600160a01b039091168152602001610339565b600d5461036a906001600160a01b031681565b6103a86103a3366004613a89565b610948565b005b6008545b604051908152602001610339565b6103a86103ca366004613a5b565b610a7a565b6103a86103dd366004613ab5565b610ea3565b6103f56103f0366004613af6565b610f2a565b6040805193845260208085019390935281519084015201516060820152608001610339565b6103a8610428366004613a5b565b610f84565b6103ae61043b366004613a89565b61112f565b6103ae600e5481565b6103ae62093a8081565b61032d610461366004613b18565b601660209081526000928352604080842090915290825290205460ff1681565b6103a861048f366004613b18565b6111d7565b6103a86104a2366004613ab5565b611314565b6103a86104b5366004613af6565b61132f565b6104ef6104c8366004613b51565b60156020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610339565b6103ae61051d366004613a5b565b611446565b6103a8610530366004613b6e565b6114ea565b61036a610543366004613a5b565b6115bb565b6103ae610556366004613b51565b611646565b6103a8610569366004613ba8565b61166a565b6103ae60115481565b6103a8610585366004613b51565b611741565b6103ae610598366004613b51565b6117d4565b6103a861186e565b6103a86105b3366004613a5b565b6118d4565b6103a86105c6366004613b6e565b611af2565b61036a6105d9366004613a5b565b611e9e565b6103a86105ec366004613a89565b611ec8565b600a546001600160a01b031661036a565b6103ae600f5481565b61034a6120a2565b610647610621366004613a5b565b6010602052600090815260409020805460019091015460ff808316926101009004169083565b6040805160ff948516815293909216602084015290820152606001610339565b6103a8610675366004613bf3565b6120b1565b61068d610688366004613a5b565b6120bc565b60408051928352602083019190915201610339565b6103ae6106b0366004613c21565b601860209081526000928352604080842090915290825290205481565b6103a86106db366004613c75565b6120ea565b6103ae6106ee366004613b51565b612178565b61034a610701366004613a5b565b6121a2565b6103ae60125481565b61032d61071d366004613b18565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6103ae610759366004613b51565b612396565b6103ae61076c366004613c21565b601960209081526000928352604080842090915290825290205481565b6103a8610797366004613b51565b6123cf565b6103a86107aa366004613a5b565b6124b1565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806108055750610805826127c9565b92915050565b60606000805461081a90613d73565b80601f016020809104026020016040519081016040528092919081815260200182805461084690613d73565b80156108935780601f1061086857610100808354040283529160200191610893565b820191906000526020600020905b81548152906001019060200180831161087657829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b031661092c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610953826115bb565b9050806001600160a01b0316836001600160a01b031614156109dd5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610923565b336001600160a01b03821614806109f957506109f9813361071d565b610a6b5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610923565b610a7583836128ac565b505050565b6002600b541415610acd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610923565b6002600b55600c5460125482916001600160a01b031690600090610af18382612932565b6001600160a01b038416600090815260156020526040902060030155610b1683611646565b6001600160a01b038416600090815260156020526040902060020155610b53846000908152600260205260409020546001600160a01b0316151590565b610bc55760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610923565b6000848152601b6020526040902060020154610be59085908590846129e0565b60008581526019602090815260408083206001600160a01b0388168085529083528184209490945560158252808320600301548884526018835281842094845293825280832093909355868252601b90522054601154909250905060015b601454811015610d275760148181548110610c6057610c60613dc7565b6000918252602090912001546001600160a01b03169350610c818483612932565b6001600160a01b038516600090815260156020526040902060030155610ca684611646565b6001600160a01b038516600090815260156020526040902060020155610cce858585856129e0565b60008681526019602090815260408083206001600160a01b038916808552908352818420949094556015825280832060030154898452601883528184209484529390915290205580610d1f81613e25565b915050610c43565b5060005b601454811015610e9657600060148281548110610d4a57610d4a613dc7565b60009182526020808320909101548983526019825260408084206001600160a01b03909216808552919092529120549091508015610e815760008881526019602090815260408083206001600160a01b03861680855292528083209290925590517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905263a9059cbb90604401602060405180830381600087803b158015610dfe57600080fd5b505af1158015610e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e369190613e5e565b50604080513381526001600160a01b03841660208201529081018290527f540798df468d7b23d11f156fdb954cb19ad414d150722a7b6d55ba369dea792e9060600160405180910390a15b50508080610e8e90613e25565b915050610d2b565b50506001600b5550505050565b610ead3382612a5e565b610f1f5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610923565b610a75838383612b62565b601a6020528160005260406000208181548110610f4657600080fd5b600091825260209182902060049091020180546001820154604080518082019091526002840154815260039093015493830193909352935090915083565b33610f8e826115bb565b6001600160a01b031614610fa157600080fd5b600081815260106020526040902054610fbe9060ff166005613f9b565b610fcb90620f4240613faa565b610fdd90670de0b6b3a7640000613faa565b60008281526010602052604090206001015411610ff957600080fd5b600081815260106020526040902054600660ff9091161061101957600080fd5b60008181526010602052604090205460ff16600114156110a65760006110616005837f2a314a9200000000000000000000000000000000000000000000000000000000612d52565b6000838152601060205260409020805460ff909216610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff909216919091179055505b60008181526010602052604081208054600192906110c890849060ff16613fe7565b82546101009290920a60ff8181021990931691831602179091556000838152601060209081526040918290205482518681529316908301527f7c5df07daff086a5c44a8baad5d3e79781acaa5ec7654211fa8e30cc7322211392500160405180910390a150565b600061113a836117d4565b82106111ae5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e64730000000000000000000000000000000000000000006064820152608401610923565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b031633146112315760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b6001600160a01b0382166000908152601560205260409020600201541561125757600080fd5b6014805460018082019092557fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03948516908117909155600090815260156020908152604080832042600282018190559055601682528083209490951682529290925291902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055565b610a75838383604051806020016040528060008152506120ea565b600a546001600160a01b031633146113895760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b604080518082018252838152602080820184815260178054600181018255600082905293517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1560029095029485015590517fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c1690930192909255905482519081529081018490529081018290527fa41017d8802e7e891c590c66e4f54b95797591f870898950d292f779fd6f95f89060600160405180910390a15050565b600061145160085490565b82106114c55760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e647300000000000000000000000000000000000000006064820152608401610923565b600882815481106114d8576114d8613dc7565b90600052602060002001549050919050565b600a546001600160a01b031633146115445760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b60006017848154811061155957611559613dc7565b60009182526020918290206002909102018481556001810184905560408051878152928301869052820184905291507f995322dc15f5c8a0198e5dbadbb1142f145efaa71fba43947f92505288ac5e129060600160405180910390a150505050565b6000818152600260205260408120546001600160a01b0316806108055760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610923565b6001600160a01b038116600090815260156020526040812054610805904290612e03565b600a546001600160a01b031633146116c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b6001600160a01b0383166000908152601560205260409020600201546116e957600080fd5b6001600160a01b0392831660009081526016602090815260408083209490951682529290925291902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b600a546001600160a01b0316331461179b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b6040516001600160a01b038216904780156108fc02916000818181858888f193505050501580156117d0573d6000803e3d6000fd5b5050565b60006001600160a01b0382166118525760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610923565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146118c85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b6118d26000612e19565b565b600e54816118e160085490565b6118eb919061400c565b11156119395760405162461bcd60e51b815260206004820181905260248201527f507572636861736520776f756c6420657863656564206d617820737570706c796044820152606401610923565b600081600f546119499190613faa565b600c54600d546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0391821660248201526044810184905292935016906323b872dd90606401602060405180830381600087803b1580156119ba57600080fd5b505af11580156119ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f29190613e5e565b611a3e5760405162461bcd60e51b815260206004820152601060248201527f57726f6e672070617920616d6f756e74000000000000000000000000000000006044820152606401610923565b60005b82811015610a75576000611a5460085490565b9050600e54611a6260085490565b1015611adf57611a723382612e83565b6040805160608101825260018082526000602080840182815284860183815287845260109092529490912092518354945160ff908116610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090961691161793909317825591519101555b5080611aea81613e25565b915050611a41565b60008381526002602052604090205483906001600160a01b0316611b585760405162461bcd60e51b815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610923565b600c546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015611bc357600080fd5b505af1158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb9190613e5e565b611c0457600080fd5b82601154611c12919061400c565b6011556000848152601b602052604090208054611c3090859061400c565b808255611c3e90859061400c565b81600201819055508360126000828254611c58919061400c565b92505081905550600060178481548110611c7457611c74613dc7565b906000526020600020906002020190506000611caf868360405180604001604052908160008201548152602001600182015481525050612e9d565b905080601060008981526020019081526020016000206001016000828254611cd7919061400c565b90915550508154600090611ceb904261400c565b6000898152601a6020526040902054909150801580611d4457506000898152601a602052604090208290611d20600184614024565b81548110611d3057611d30613dc7565b906000526020600020906004020160010154105b15611dbf576000898152601a6020908152604080832081516060810183528c8152808401878152835180850185528a5481526001808c01548288015294830190815283548086018555938752958590209151600490930290910191825551918101919091559151805160028401550151600390910155611e41565b6000898152601a602052604090208890611dda600184614024565b81548110611dea57611dea613dc7565b906000526020600020906004020160000154611e06919061400c565b60008a8152601a60205260409020611e1f600184614024565b81548110611e2f57611e2f613dc7565b60009182526020909120600490910201555b604080518a8152602081018a905290810183905284546060820152600185015460808201527f392e2679c5174813e985de6b1bb03672f942be834139636e218f0b4f4f01f99b9060a00160405180910390a1505050505050505050565b60148181548110611eae57600080fd5b6000918252602090912001546001600160a01b0316905081565b600a546001600160a01b03163314611f225760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b600c546001600160a01b0383811691161415611f805760405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f74207769746864726177207374616b696e6720746f6b656e0000006044820152606401610923565b6001600160a01b03821660009081526015602052604090206002015415611fe95760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f742077697468647261772072657761726420746f6b656e000000006044820152606401610923565b816001600160a01b031663a9059cbb61200a600a546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561206a57600080fd5b505af115801561207e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190613e5e565b60606001805461081a90613d73565b6117d0338383612ebe565b601781815481106120cc57600080fd5b60009182526020909120600290910201805460019091015490915082565b6120f43383612a5e565b6121665760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610923565b61217284848484612fab565b50505050565b6001600160a01b0381166000908152601560205260408120600101546108059062093a8090613faa565b6000818152600260205260409020546060906001600160a01b031661222f5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610923565b600061224660408051602081019091526000815290565b9050600061225384613034565b6040516020016122639190614057565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526000868152601060205290812060010154919250906122af90613034565b600086815260106020526040812054919250906122d390610100900460ff16613034565b600087815260106020526040812054919250906122f29060ff16613034565b90506000808651116123135760405180602001604052806000815250612338565b8583836040516020016123289392919061409c565b6040516020818303038152906040525b905061236a858584868560405160200161235695949392919061413c565b604051602081830303815290604052613166565b60405160200161237a9190614330565b6040516020818303038152906040529650505050505050919050565b600c5460009081906001600160a01b038481169116146123b8576011546123bc565b6012545b90506123c88382612932565b9392505050565b600a546001600160a01b031633146124295760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610923565b6001600160a01b0381166124a55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610923565b6124ae81612e19565b50565b60008181526002602052604090205481906001600160a01b03166125175760405162461bcd60e51b815260206004820152601460248201527f546f6b656e20646f6573206e6f742065786973740000000000000000000000006044820152606401610923565b33612521836115bb565b6001600160a01b0316146125775760405162461bcd60e51b815260206004820152601060248201527f4e6f74204f776e6572206f66204e4654000000000000000000000000000000006044820152606401610923565b6000828152601a60209081526040808320601b909252822081549192909142846125a2600184614024565b815481106125b2576125b2613dc7565b906000526020600020906004020160010154116125ee5760028301546000878152601a602052604081209193506125e9919061393e565b6126a4565b60005b818110156126a2574285828154811061260c5761260c613dc7565b9060005260206000209060040201600101541115612629576126a2565b84818154811061263b5761263b613dc7565b90600052602060002090600402016000015483612658919061400c565b925084818154811061266c5761266c613dc7565b6000918252602082206004909102018181556001810182905560028101829055600301558061269a81613e25565b9150506125f1565b505b8183600201546126b49190614024565b600284015582546126c6908390614024565b83556011546126d6908390614024565b6011556012546126e7908390614024565b601255600c546040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018490526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b15801561274f57600080fd5b505af1158015612763573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127879190613e5e565b5060408051878152602081018490527fc266233ef087afa73a2a6f7c129f3c7184bbdae1c5b5763a4b9b378a6ae11fe7910160405180910390a1505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd00000000000000000000000000000000000000000000000000000000148061285c57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061080557507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610805565b600081815260046020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915581906128f9826115bb565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008161295b57506001600160a01b038216600090815260156020526040902060030154610805565b6001600160a01b0383166000908152601560205260409020600181015460029091015483919061298a86611646565b6129949190614024565b61299e9190613faa565b6129b090670de0b6b3a7640000613faa565b6129ba91906143a4565b6001600160a01b0384166000908152601560205260409020600301546123c8919061400c565b60008481526019602090815260408083206001600160a01b03871680855290835281842054888552601884528285209185529252822054670de0b6b3a764000090612a2b8786612932565b612a359190614024565b612a3f9086613faa565b612a4991906143a4565b612a53919061400c565b90505b949350505050565b6000818152600260205260408120546001600160a01b0316612ae85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e00000000000000000000000000000000000000006064820152608401610923565b6000612af3836115bb565b9050806001600160a01b0316846001600160a01b03161480612b2e5750836001600160a01b0316612b238461089d565b6001600160a01b0316145b80612a5657506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16612a56565b826001600160a01b0316612b75826115bb565b6001600160a01b031614612bf15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e00000000000000000000000000000000000000000000006064820152608401610923565b6001600160a01b038216612c6c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610923565b612c7783838361333f565b612c826000826128ac565b6001600160a01b0383166000908152600360205260408120805460019290612cab908490614024565b90915550506001600160a01b0382166000908152600360205260408120805460019290612cd990849061400c565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000612d5f84600161400c565b60408051446020820152439181019190915232606090811b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016908201523a60748201527fffffffff00000000000000000000000000000000000000000000000000000000841660948201526098810185905260b8016040516020818303038152906040528051906020012060001c612df891906143b8565b612a5690600161400c565b6000818310612e1257816123c8565b5090919050565b600a80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6117d08282604051806020016040528060008152506133f7565b60008282602001518360000151612eb49190613faa565b6123c89190613faa565b816001600160a01b0316836001600160a01b03161415612f205760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610923565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612fb6848484612b62565b612fc284848484613480565b6121725760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610923565b60608161307457505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b811561309e578061308881613e25565b91506130979050600a836143a4565b9150613078565b60008167ffffffffffffffff8111156130b9576130b9613c46565b6040519080825280601f01601f1916602001820160405280156130e3576020820181803683370190505b5090505b8415612a56576130f8600183614024565b9150613105600a866143b8565b61311090603061400c565b60f81b81838151811061312557613125613dc7565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061315f600a866143a4565b94506130e7565b606081516000141561318657505060408051602081019091526000815290565b600060405180606001604052806040815260200161445560409139905060006003845160026131b5919061400c565b6131bf91906143a4565b6131ca906004613faa565b905060006131d982602061400c565b67ffffffffffffffff8111156131f1576131f1613c46565b6040519080825280601f01601f19166020018201604052801561321b576020820181803683370190505b509050818152600183018586518101602084015b81831015613287576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161322f565b6003895106600181146132a157600281146132eb57613331565b7f3d3d0000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe830152613331565b7f3d000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301525b509398975050505050505050565b6001600160a01b03831661339a5761339581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6133bd565b816001600160a01b0316836001600160a01b0316146133bd576133bd8382613648565b6001600160a01b0382166133d457610a75816136e5565b826001600160a01b0316826001600160a01b031614610a7557610a758282613794565b61340183836137d8565b61340e6000848484613480565b610a755760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610923565b60006001600160a01b0384163b15613640576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906134dd9033908990889088906004016143cc565b602060405180830381600087803b1580156134f757600080fd5b505af1925050508015613545575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261354291810190614408565b60015b6135f5573d808015613573576040519150601f19603f3d011682016040523d82523d6000602084013e613578565b606091505b5080516135ed5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608401610923565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050612a56565b506001612a56565b60006001613655846117d4565b61365f9190614024565b6000838152600760205260409020549091508082146136b2576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906136f790600190614024565b6000838152600960205260408120546008805493945090928490811061371f5761371f613dc7565b90600052602060002001549050806008838154811061374057613740613dc7565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061377857613778614425565b6001900381819060005260206000200160009055905550505050565b600061379f836117d4565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661382e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610923565b6000818152600260205260409020546001600160a01b0316156138935760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610923565b61389f6000838361333f565b6001600160a01b03821660009081526003602052604081208054600192906138c890849061400c565b909155505060008181526002602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b50805460008255600402906000526020600020908101906124ae91905b808211156139835760008082556001820181905560028201819055600382015560040161395b565b5090565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146124ae57600080fd5b6000602082840312156139c757600080fd5b81356123c881613987565b60005b838110156139ed5781810151838201526020016139d5565b838111156121725750506000910152565b60008151808452613a168160208601602086016139d2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006123c860208301846139fe565b600060208284031215613a6d57600080fd5b5035919050565b6001600160a01b03811681146124ae57600080fd5b60008060408385031215613a9c57600080fd5b8235613aa781613a74565b946020939093013593505050565b600080600060608486031215613aca57600080fd5b8335613ad581613a74565b92506020840135613ae581613a74565b929592945050506040919091013590565b60008060408385031215613b0957600080fd5b50508035926020909101359150565b60008060408385031215613b2b57600080fd5b8235613b3681613a74565b91506020830135613b4681613a74565b809150509250929050565b600060208284031215613b6357600080fd5b81356123c881613a74565b600080600060608486031215613b8357600080fd5b505081359360208301359350604090920135919050565b80151581146124ae57600080fd5b600080600060608486031215613bbd57600080fd5b8335613bc881613a74565b92506020840135613bd881613a74565b91506040840135613be881613b9a565b809150509250925092565b60008060408385031215613c0657600080fd5b8235613c1181613a74565b91506020830135613b4681613b9a565b60008060408385031215613c3457600080fd5b823591506020830135613b4681613a74565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060008060808587031215613c8b57600080fd5b8435613c9681613a74565b93506020850135613ca681613a74565b925060408501359150606085013567ffffffffffffffff80821115613cca57600080fd5b818701915087601f830112613cde57600080fd5b813581811115613cf057613cf0613c46565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613d3657613d36613c46565b816040528281528a6020848701011115613d4f57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600181811c90821680613d8757607f821691505b60208210811415613dc1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e5757613e57613df6565b5060010190565b600060208284031215613e7057600080fd5b81516123c881613b9a565b600181815b80851115613ed457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613eba57613eba613df6565b80851615613ec757918102915b93841c9390800290613e80565b509250929050565b600082613eeb57506001610805565b81613ef857506000610805565b8160018114613f0e5760028114613f1857613f34565b6001915050610805565b60ff841115613f2957613f29613df6565b50506001821b610805565b5060208310610133831016604e8410600b8410161715613f57575081810a610805565b613f618383613e7b565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613f9357613f93613df6565b029392505050565b60006123c860ff841683613edc565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613fe257613fe2613df6565b500290565b600060ff821660ff84168060ff0382111561400457614004613df6565b019392505050565b6000821982111561401f5761401f613df6565b500190565b60008282101561403657614036613df6565b500390565b6000815161404d8185602086016139d2565b9290920192915050565b7f534143524544204245415354202300000000000000000000000000000000000081526000825161408f81600e8501602087016139d2565b91909101600e0192915050565b600084516140ae8184602089016139d2565b80830190507f2f0000000000000000000000000000000000000000000000000000000000000080825285516140ea816001850160208a016139d2565b600192019182015283516141058160028401602088016139d2565b7f2e706e67000000000000000000000000000000000000000000000000000000006002929091019182015260060195945050505050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000815260008651614174816009850160208b016139d2565b7f222c20226465736372697074696f6e223a2253616372656420426561737420696009918401918201527f7320746865206d797374686963616c206265617374206f6620455645524d4f4f60298201527f4e20776f726c642e2049742063616e20636f6e73756d6520455645524d4f4f4e60498201527f20546f6b656e20666f722065787020616e6420676574207374726f6e6765722e60698201527f222c2022657870223a220000000000000000000000000000000000000000000060898201528651614249816093840160208b016139d2565b7f222c202265766f6c466f726d223a2200000000000000000000000000000000006093929091019182015285516142878160a2840160208a016139d2565b6143236142fa6142f46142cb6142c560a2868801017f222c202272616365223a220000000000000000000000000000000000000000008152600b0190565b8a61403b565b7f222c2022696d616765223a2022000000000000000000000000000000000000008152600d0190565b8761403b565b7f227d000000000000000000000000000000000000000000000000000000000000815260020190565b9998505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081526000825161436881601d8501602087016139d2565b91909101601d0192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826143b3576143b3614375565b500490565b6000826143c7576143c7614375565b500690565b60006001600160a01b038087168352808616602084015250836040830152608060608301526143fe60808301846139fe565b9695505050505050565b60006020828403121561441a57600080fd5b81516123c881613987565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220f0a3112b4c282b3fc157c2e6b84f73d240527f019460b8c50e79369e5f55113864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 248,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 250,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 254,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 258,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 262,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 268,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1202,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1206,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1209,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1213,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2440,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "foodToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)222"
      },
      {
        "astId": 2442,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "seller",
        "offset": 0,
        "slot": "13",
        "type": "t_address_payable"
      },
      {
        "astId": 2445,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "MAX_SUPPLY",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2448,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "PRICE_PER_UNIT",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2491,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "nft",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(BeastInfo)2468_storage)"
      },
      {
        "astId": 2493,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "totalERC20Supply",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2495,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "lockedSupply",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2499,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "minters",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2502,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "rewardTokens",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2507,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "rewardData",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_struct(Reward)2486_storage)"
      },
      {
        "astId": 2518,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "rewardDistributors",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2522,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "lockChoices",
        "offset": 0,
        "slot": "23",
        "type": "t_array(t_struct(LockChoice)2453_storage)dyn_storage"
      },
      {
        "astId": 2528,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "nftRewardPerTokenPaid",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2534,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "rewards",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2540,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "nftLocks",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_array(t_struct(LockedInfo)2461_storage)dyn_storage)"
      },
      {
        "astId": 2545,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "balances",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_struct(Balances)2477_storage)"
      },
      {
        "astId": 2547,
        "contract": "contracts/SacredBeast.sol:SacredBeast",
        "label": "_paused",
        "offset": 0,
        "slot": "28",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LockChoice)2453_storage)dyn_storage": {
        "base": "t_struct(LockChoice)2453_storage",
        "encoding": "dynamic_array",
        "label": "struct SacredBeast.LockChoice[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LockedInfo)2461_storage)dyn_storage": {
        "base": "t_struct(LockedInfo)2461_storage",
        "encoding": "dynamic_array",
        "label": "struct SacredBeast.LockedInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)222": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Reward)2486_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SacredBeast.Reward)",
        "numberOfBytes": "32",
        "value": "t_struct(Reward)2486_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(LockedInfo)2461_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SacredBeast.LockedInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LockedInfo)2461_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Balances)2477_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SacredBeast.Balances)",
        "numberOfBytes": "32",
        "value": "t_struct(Balances)2477_storage"
      },
      "t_mapping(t_uint256,t_struct(BeastInfo)2468_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SacredBeast.BeastInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BeastInfo)2468_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Balances)2477_storage": {
        "encoding": "inplace",
        "label": "struct SacredBeast.Balances",
        "members": [
          {
            "astId": 2470,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "total",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2472,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "unlocked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2474,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "locked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2476,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "earned",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(BeastInfo)2468_storage": {
        "encoding": "inplace",
        "label": "struct SacredBeast.BeastInfo",
        "members": [
          {
            "astId": 2463,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "evolForm",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2465,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "race",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2467,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "exp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LockChoice)2453_storage": {
        "encoding": "inplace",
        "label": "struct SacredBeast.LockChoice",
        "members": [
          {
            "astId": 2450,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "duration",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2452,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "multiplier",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LockedInfo)2461_storage": {
        "encoding": "inplace",
        "label": "struct SacredBeast.LockedInfo",
        "members": [
          {
            "astId": 2455,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2457,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "unlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2460,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "lockChoice",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(LockChoice)2453_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Reward)2486_storage": {
        "encoding": "inplace",
        "label": "struct SacredBeast.Reward",
        "members": [
          {
            "astId": 2479,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "periodFinish",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2481,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "rewardRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2483,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2485,
            "contract": "contracts/SacredBeast.sol:SacredBeast",
            "label": "rewardPerTokenStored",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}